from aiogram import types


def get_emoji(subj: str, settings: dict) -> str | None:
    """–§—É–Ω–∫—Ü–∏—è, –ø–æ–¥–±–∏—Ä–∞—é—â–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —ç–º–æ–¥–∂–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        subj (str): –ü—Ä–æ–±–ª–µ–º–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Zabbix
        settings (dict): –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞ Zabbix

    Returns:
        str | None: –≠–º–æ–¥–∂–∏
    """

    emojies = {
        "Problem": "üö®",
        "Resolved": "‚úÖ",
        "Update": "üöß",
        "Not classified": "‚ÅâÔ∏è",
        "Information": "üîµ",
        "Warning": "üü°",
        "Average": "üü†",
        "High": "üî¥",
        "Disaster": "‚õîÔ∏è",
        "Test": "üõ†",
    }

    emoji_1 = emojies.get(subj.split()[0].rstrip(":"))
    emoji_2 = emojies.get(settings.get("criticality"))

    return emoji_1, emoji_2


def get_keyboard(
    settings: dict, config: object, edit=False
) -> types.InlineKeyboardMarkup | None:
    """–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö
    –∏–∑ Zabbix –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

     - –µ—Å–ª–∏ –∫–ª–∞–≤–∏—Ç—É—Ä–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ, —Ç–æ —Ñ–ª–∞–≥ edit –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
       False.
     - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –≤ Zabbix), —Ç–æ
       –≤ edit –ø–µ—Ä–µ–¥–∞—ë–º True.

    Args:
        settings (dict): –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞ Zabbix
        config (object): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
        edit (bool, optional): –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é False.

    Returns:
        types.InlineKeyboardMarkup | None: –≠–∫–∑–µ–º–ø–ª—è—Ä Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ "keyboard" —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –Ω—É–∂–Ω–∞ –ª–∏ –Ω–∞–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if settings.get("keyboard") and settings["keyboard"] == "True":
        item_id = settings["itemid"]
        event_id = settings["eventid"]
        trigger_id = settings["triggerid"]
        period = (
            settings["graphperiod"] if settings.get("graphperiod") else config.period
        )
        keyboard = types.InlineKeyboardMarkup(
            row_width=2,
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if edit:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π
            keyboard.add(
                types.InlineKeyboardButton(
                    "–ì—Ä–∞—Ñ–∏–∫ üìà",
                    url=f"{config.zabbix_api_url}history.php?action=showgraph&itemids[]={item_id}&from=now-{period}",
                ),
                types.InlineKeyboardButton(
                    "–î–µ—Ç–∞–ª–∏ üìã",
                    url=f"{config.zabbix_api_url}tr_events.php?triggerid={trigger_id}&eventid={event_id}",
                ),
                types.InlineKeyboardButton(
                    "BMC üó≥",
                    url=f"{config.zabbix_api_url}",
                ),
                types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ", callback_data="empty"),
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        else:
            keyboard.add(
                types.InlineKeyboardButton(
                    "–ì—Ä–∞—Ñ–∏–∫ üìà",
                    url=f"{config.zabbix_api_url}history.php?action=showgraph&itemids[]={item_id}&from=now-{period}",
                ),
                types.InlineKeyboardButton(
                    "–î–µ—Ç–∞–ª–∏ üìã",
                    url=f"{config.zabbix_api_url}tr_events.php?triggerid={trigger_id}&eventid={event_id}",
                ),
                types.InlineKeyboardButton("BMC üó≥", url=f"{config.zabbix_api_url}"),
                types.InlineKeyboardButton(
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üìå", callback_data="confirm_problem"
                ),
            )
        return keyboard

    return None
